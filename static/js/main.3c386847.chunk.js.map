{"version":3,"sources":["components/header/header.jsx","views/home.jsx","constants.js","components/poster/poster.jsx","components/list/list.jsx","api.js","components/movies-list/movies-list.jsx","components/movie/movie.jsx","views/movies.jsx","components/tv-shows-list/tv-shows-list.jsx","components/tv-show/tv-show.jsx","components/tv-season/tv-season.jsx","components/tv-episode/tv-episode.jsx","views/tv.jsx","views/search.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","header","marginBottom","position","ml2","marginLeft","mt2","marginTop","select","width","button","Header","classes","Box","component","className","m","exact","to","home","display","fontSize","maxWidth","color","Home","Container","Typography","TMD_URL","TMD_IMG_URL","TMD_API_KEY","OPTIONS","value","Poster","posterPath","height","media","margin","CardMedia","src","onError","e","target","title","card","boxSizing","padding","flexGrow","flexShrink","inlineSubtitle","marginRight","cardLinkStyles","textDecoration","List","list","type","Grid","container","wrap","justify","map","item","style","key","id","String","Date","now","Card","poster_path","variant","vote_average","overview","TMD_Api","fetch","data","json","page","parsedData","results","searchArea","searchValue","season_number","tvShowId","episode_number","movieTitle","buttonBox","justifyContent","mr2","mr4","currentPage","API","MoviesList","useState","setList","setPage","useEffect","fetchMovies","then","scrollToTop","nextPage","backPage","document","body","scrollTop","documentElement","Button","onClick","movieTextInfo","Movie","movie","setMovie","useParams","fetchMovie","alt","release_date","runtime","status","vote_count","tagline","revenue","Movies","path","TvShowList","fetchTvShows","tvShowInfo","TvShow","tvShow","setTvShow","fetchTvShow","tv","first_air_date","episode_run_time","number_of_seasons","number_of_episodes","seasons","season","name","flexDirection","TvSeason","tvSeason","setTvSeason","fetchTvShowSeason","episodes","episode","TvEpisode","tvEpisode","setTvEpisode","fetchTvEpisode","TvShows","search","input","Search","setSearchArea","setSearchValue","fetchWithSearch","result","isEmpty","length","TextField","label","onChange","option","MenuItem","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c386847.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Box } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        marginBottom: 24,\r\n        position: 'relative'\r\n    },\r\n    ml2: {\r\n        marginLeft: 16,\r\n    },\r\n    mt2: {\r\n        marginTop: 16,\r\n    },\r\n    select: {\r\n        width: 100,\r\n    },\r\n    button: {\r\n        marginTop: 16,\r\n        marginLeft: 16,\r\n    }\r\n})\r\n\r\nexport const Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box component='header' className={`header ${classes.header}`}>\r\n            <Box component='nav' m={2}>\r\n                <ul className=\"main-nav\">\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' exact to='/'>Home</NavLink>\r\n                    </li>\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' to='/movies'>Movies</NavLink>\r\n                    </li>\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' to='/tv'>TV-Show</NavLink>\r\n                    </li>\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' to='/search'>Search</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Box, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { Header } from '../components/header/header'\r\n\r\nconst useStyles = makeStyles({\r\n    home: {\r\n        display: 'inline-block',\r\n        marginBottom: '32px',\r\n        fontSize: '32px',\r\n        maxWidth: '720px',\r\n        color: '#444444',\r\n    },\r\n})\r\nexport const Home = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container component='div'>\r\n            <Header />\r\n            <Box component='main' m={2}>\r\n                <Typography component='p' className={ classes.home } >\r\n                    Hello, it's app for search info about movies or tv shows. You need to choose search area. <br/>\r\n                    Get started:\r\n                </Typography>\r\n                <Box component='div' >\r\n                    <Link to='/movies' className='button main-page-button'>Movies</Link>\r\n                    <Link to='/tv' className='button main-page-button'>TV-Shows</Link>\r\n                </Box>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n","export const TMD_URL = 'https://api.themoviedb.org/3/';\r\nexport const TMD_IMG_URL = 'https://image.tmdb.org/t/p/'\r\nexport const MOVIE_PATH = 'movie/';\r\nexport const TV_SHOW_PATH = 'tv/';\r\nexport const DISCOVER_PATH = 'discover/';\r\nexport const TMD_API_KEY = 'api_key=5dea54ae7c9d9964e72e2ee872e49402';\r\nexport const MAX_PAGE = 100;\r\nexport const MIN_PAGE = 1;\r\nexport const OPTIONS = [\r\n    { value: 'movie' },\r\n    { value: 'tv' }\r\n]\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CardMedia } from '@material-ui/core';\r\n\r\nimport { TMD_IMG_URL } from '../../constants'\r\n\r\n\r\n\r\nexport const Poster = ({ posterPath, width, height }) => {\r\n    const useStyles = makeStyles({\r\n        media: {\r\n            width: width ? width : 200,\r\n            height: height ? height : 300,\r\n            margin: '0, auto',\r\n            marginBottom: 8,\r\n        }\r\n    })\r\n    const classes = useStyles();\r\n    return (\r\n        <CardMedia\r\n            src={`${TMD_IMG_URL}w300${posterPath}`}\r\n            onError={(e) => e.target.src = 'https://imgur.com/Ax000FS.png'}\r\n            title=\"poster\"\r\n            className={classes.media}\r\n            component='img'\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport { Card, Typography, Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Poster } from '../poster/poster';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: 280,\r\n        padding: 24,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n    },\r\n    title: {\r\n        marginBottom: 16,\r\n    },\r\n    inlineSubtitle: {\r\n        marginRight: 8,\r\n    }\r\n});\r\nconst cardLinkStyles = {\r\n    display: 'flex',\r\n    boxSizing: 'border-box',\r\n    width: '280px',\r\n    textDecoration: 'none',\r\n    flexShrink: 0,\r\n    marginBottom: 24,\r\n}\r\nexport const List = ({ list, type }) => {\r\n    const classes = useStyles();\r\n    switch (type) {\r\n        case 'movie':\r\n            return (\r\n                <Grid\r\n                    container\r\n                    className={classes.media}\r\n                    wrap='wrap'\r\n                    justify='space-between'\r\n                >\r\n                    {list && list.map(item => (\r\n                        <Link style={cardLinkStyles} key={item.id + String(Date.now())} to={`/movies/${item.id}`}>\r\n                            <Card className={classes.card}>\r\n                                <Poster posterPath={item.poster_path} />\r\n                                <Typography variant='h5' component='h3' className={classes.title}>\r\n                                    {item.title}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='span' className={classes.inlineSubtitle}>\r\n                                    Votes:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='span'>\r\n                                    {item.vote_average}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='p'>\r\n                                    Discription:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='p'>\r\n                                    {item.overview}\r\n                                </Typography>\r\n                            </Card>\r\n                        </Link>\r\n                    ))}\r\n                </Grid>\r\n            )\r\n        case 'tv':\r\n            return (\r\n                <Grid\r\n                    container\r\n                    wrap='wrap'\r\n                    justify='space-between'\r\n                >\r\n                    {list && list.map(item => (\r\n                        <Link style={cardLinkStyles} key={item.id} to={`/tv/${item.id}`}>\r\n                            <Card className={classes.card}>\r\n                                <Poster posterPath={item.poster_path} />\r\n                                <Typography variant='h5' component='h3' className={classes.title}>\r\n                                    {item.title}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='span' className={classes.inlineSubtitle}>\r\n                                    Votes:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='span'>\r\n                                    {item.vote_average}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='p'>\r\n                                    Discription:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='p'>\r\n                                    {item.overview}\r\n                                </Typography>\r\n                            </Card>\r\n                        </Link>\r\n                    ))}\r\n                </Grid>\r\n            )\r\n        default:\r\n            return null;\r\n    }\r\n}","import { TMD_URL, TMD_API_KEY, DISCOVER_PATH } from './constants'\r\n\r\nexport class TMD_Api {\r\n    async fetchMovie(id) {\r\n        const data = await fetch(`${TMD_URL}movie/${id}?${TMD_API_KEY}`)\r\n        return await data.json()\r\n    }\r\n    async fetchMovies(page) {\r\n        const data = await fetch(`${TMD_URL}${DISCOVER_PATH}movie?${TMD_API_KEY}&page=${page}`)\r\n        const parsedData = await data.json()\r\n        return parsedData.results\r\n    }\r\n    async fetchTvShow(id) {\r\n        const data = await fetch(`${TMD_URL}tv/${id}?${TMD_API_KEY}`)\r\n        return await data.json()\r\n    }\r\n    async fetchTvShows(page) {\r\n        const data = await fetch(`${TMD_URL}${DISCOVER_PATH}tv?${TMD_API_KEY}&page=${page}`)\r\n        const parsedData = await data.json()\r\n        return parsedData.results\r\n    }\r\n    async fetchWithSearch(searchArea, searchValue, page) {\r\n        const data = await fetch(`${TMD_URL}search/${searchArea}?${TMD_API_KEY}&page=${page}&query=${searchValue}`)\r\n        return await data.json()\r\n    }\r\n    async fetchTvShowSeason(id, season_number) {\r\n        const data = await fetch(`${TMD_URL}tv/${id}/season/${season_number}?${TMD_API_KEY}`)\r\n        return data.json()\r\n    }\r\n    async fetchTvEpisode(tvShowId, season_number, episode_number) {\r\n        const data = await fetch(`${TMD_URL}tv/${tvShowId}/season/${season_number}/episode/${episode_number}?${TMD_API_KEY}`)\r\n        return data.json()\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Typography, Button, Box } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { List } from '../list/list'\r\nimport { TMD_Api } from '../../api'\r\nimport { MAX_PAGE, MIN_PAGE } from '../../constants'\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: 280,\r\n        padding: 24,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n    },\r\n    media: {\r\n        width: 200,\r\n        height: 300,\r\n        marginBottom: 8,\r\n    },\r\n    movieTitle: {\r\n        marginBottom: 16,\r\n    },\r\n    inlineSubtitle: {\r\n        marginRight: 8,\r\n    },\r\n    buttonBox: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: 32,\r\n    },\r\n    mr2: {\r\n        marginRight: '16px'\r\n    },\r\n    mr4: {\r\n        marginRight: '32px'\r\n    },\r\n    currentPage: {\r\n        margin: '16px', \r\n        display: 'inline-block' \r\n    }\r\n});\r\nconst API = new TMD_Api()\r\nexport const MoviesList = () => {\r\n    const [list, setList] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    useEffect(() => {\r\n        API.fetchMovies(page)\r\n            .then(list => setList(list))\r\n        scrollToTop()\r\n    }, [page])\r\n    const nextPage = () => {\r\n        if (page < MAX_PAGE) {\r\n            setPage(page + 1)\r\n        }\r\n    }\r\n    const backPage = () => {\r\n        if (page > MIN_PAGE) {\r\n            setPage(page - 1)\r\n        }\r\n    }\r\n    const scrollToTop = () => {\r\n        document.body.scrollTop = 0; // For Safari\r\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\r\n    }\r\n    const classes = useStyles()\r\n    return (\r\n        <>\r\n            <Typography\r\n                variant='subtitle2'\r\n                component='span'\r\n                className={classes.currentPage}\r\n            >\r\n                Current page: {page}\r\n            </Typography>\r\n            <Button\r\n                onClick={backPage}\r\n                variant='contained'\r\n                color='primary'\r\n                className={classes.mr2}\r\n            >\r\n                back\r\n            </Button>\r\n            <Button\r\n                onClick={nextPage}\r\n                variant='contained'\r\n                color='primary'\r\n            >\r\n                next\r\n            </Button>\r\n            <List type='movie' list={list} />\r\n            <Box className={classes.buttonBox}>\r\n                <Button onClick={backPage} variant='contained' color='primary' className={classes.mr4}>\r\n                    back\r\n                </Button>\r\n                <Button onClick={nextPage} variant='contained' color='primary'>\r\n                    next\r\n                </Button>\r\n            </Box>\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Box, Grid } from '@material-ui/core';\r\n\r\nimport { TMD_Api } from '../../api'\r\n\r\nimport { TMD_IMG_URL } from '../../constants'\r\n\r\nconst useStyles = makeStyles({\r\n    movieTextInfo: { \r\n        maxWidth: 900, \r\n        marginLeft: 16\r\n    }\r\n})\r\nconst API = new TMD_Api()\r\nexport const Movie = () => {\r\n    const [movie, setMovie] = useState({})\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        API.fetchMovie(id)\r\n            .then(movie => setMovie(movie))\r\n    }, [id])\r\n    const classes = useStyles()\r\n    return (\r\n        <Box >\r\n            {movie &&\r\n                <Grid container >\r\n                    <div className=\"img-wrapper\">\r\n                        <img\r\n                            alt={`${movie.title} poster`}\r\n                            src={`${TMD_IMG_URL}w300${movie.poster_path}`}\r\n                        />\r\n                    </div>\r\n                    <Box className={`movie-text-info ${classes.movieTextInfo}`}>\r\n                        <h3 className=\"title\">\r\n                            {movie.title}\r\n                        </h3>\r\n                        <span className=\"movie-release-date\">\r\n                            Release date: {movie.release_date}\r\n                        </span>\r\n                        <p className=\"movie-runtime\">\r\n                            Time(minutes): {movie.runtime}\r\n                        </p>\r\n                        <p className=\"movie-status\">\r\n                            Status: {movie.status}\r\n                        </p>\r\n                        <p className=\"movie-vote-average\">\r\n                            Rating: {movie.vote_average}({movie.vote_count})\r\n                        </p>\r\n                        <p className=\"movie-tagline\">\r\n                            Tagline: {movie.tagline}\r\n                        </p>\r\n                        <p className=\"movie-revenue\">\r\n                            Revenue: ${movie.revenue}\r\n                        </p>\r\n                        <p className=\"movie-disc\">\r\n                            Discription: <br />{movie.overview}\r\n                        </p>\r\n                    </Box>\r\n                </Grid>\r\n            }\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport { Header } from '../components/header/header';\r\nimport { MoviesList } from '../components/movies-list/movies-list';\r\nimport { Movie } from '../components/movie/movie'\r\n\r\nexport const Movies = ({ classes }) => {\r\n\r\n    return (\r\n        <Container component='div'>\r\n            <Header classes={classes} />\r\n            <Switch>\r\n                <Route exact path='/movies' >\r\n                    <MoviesList />\r\n                </Route>\r\n                <Route path='/movies/:id' >\r\n                    <Movie />\r\n                </Route>\r\n            </Switch>\r\n        </Container>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Typography, Button, Box } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { TMD_Api } from '../../api'\r\nimport { List } from '../list/list'\r\nimport {  MAX_PAGE, MIN_PAGE } from '../../constants'\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: 280,\r\n        padding: 24,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n    },\r\n    media: {\r\n        width: 200,\r\n        height: 300,\r\n        marginBottom: 8,\r\n    },\r\n    movieTitle: {\r\n        marginBottom: 16,\r\n    },\r\n    inlineSubtitle: {\r\n        marginRight: 8,\r\n    },\r\n    buttonBox: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        marginBottom: 32,\r\n    },\r\n    currentPage: {\r\n        margin: '16px', \r\n        display: 'inline-block' \r\n    },\r\n    mr2: {\r\n        marginRight: '16px'\r\n    },\r\n    mr4: {\r\n        marginRight: '32px'\r\n    }\r\n});\r\nconst API = new TMD_Api()\r\nexport const TvShowList = () => {\r\n    const [list, setList] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const classes = useStyles()\r\n    useEffect(() => {\r\n        API.fetchTvShows(page)\r\n            .then(list => setList(list))\r\n        scrollToTop()\r\n    }, [page])\r\n    const nextPage = () => {\r\n        if (page < MAX_PAGE) {\r\n            setPage(page + 1)\r\n        }\r\n    }\r\n    const backPage = () => {\r\n        if (page > MIN_PAGE) {\r\n            setPage(page - 1)\r\n        }\r\n    }\r\n    const scrollToTop = () => {\r\n        document.body.scrollTop = 0; // For Safari\r\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\r\n    }\r\n    return (\r\n        <div className=\"tv-shows\">\r\n            <Typography\r\n                variant='subtitle2'\r\n                component='span'\r\n            >\r\n                Current page: {page}\r\n            </Typography>\r\n            <Button\r\n                onClick={backPage}\r\n                variant='contained'\r\n                color='primary'\r\n                className={classes.mr2}\r\n            >\r\n                back\r\n            </Button>\r\n            <Button\r\n                onClick={nextPage}\r\n                variant='contained'\r\n                color='primary'\r\n            >\r\n                next\r\n            </Button>\r\n            <List type='tv' list={list} />\r\n            <Box className={classes.buttonBox}>\r\n                <Button onClick={backPage} variant='contained' color='primary' className={classes.mr4}>\r\n                    back\r\n                </Button>\r\n                <Button onClick={nextPage} variant='contained' color='primary'>\r\n                    next\r\n                </Button>\r\n            </Box>\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { Box, Grid, Card } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Poster } from '../poster/poster';\r\n\r\nimport { TMD_Api } from '../../api';\r\nimport { TMD_IMG_URL } from '../../constants';\r\n\r\nconst cardLinkStyles = {\r\n    display: 'flex',\r\n    boxSizing: 'border-box',\r\n    width: '140px',\r\n    textDecoration: 'none',\r\n    flexShrink: 0,\r\n    marginBottom: 24,\r\n}\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: '100%',\r\n        padding: 8,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n    }, \r\n    tvShowInfo: {\r\n        maxWidth: '900px', \r\n        marginLeft: '16px' \r\n    }\r\n});\r\nconst API = new TMD_Api()\r\nexport const TvShow = () => {\r\n    const [tvShow, setTvShow] = useState({});\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        API.fetchTvShow(id)\r\n            .then(tv => setTvShow(tv))\r\n    }, [id])\r\n    const classes = useStyles();\r\n    return (\r\n        <Box>\r\n            <Box >\r\n                {tvShow &&\r\n                    <Grid container >\r\n                        <div >\r\n                            <img\r\n                                alt={`${tvShow.title} poster`}\r\n                                src={`${TMD_IMG_URL}w300${tvShow.poster_path}`}\r\n                            />\r\n                        </div>\r\n                        <Box className={classes.tvShowInfo}>\r\n                            <h3 className=\"title\">\r\n                                {tvShow.title}\r\n                            </h3>\r\n                            <span className=\"tvShow-release-date\">\r\n                                First episode: {tvShow.first_air_date}\r\n                            </span>\r\n                            <p className=\"tvShow-runtime\">\r\n                                Episode runtime(minutes): {tvShow.episode_run_time}\r\n                            </p>\r\n                            <p className=\"tvShow-status\">\r\n                                Seasons: {tvShow.number_of_seasons}\r\n                            </p>\r\n                            <p className=\"tvShow-status\">\r\n                                Episodes: {tvShow.number_of_episodes}\r\n                            </p>\r\n                            <p className=\"tvShow-vote-average\">\r\n                                Rating: {tvShow.vote_average}({tvShow.vote_count})\r\n                        </p>\r\n                            <p className=\"tvShow-disc\">\r\n                                Discription: <br />{tvShow.overview}\r\n                            </p>\r\n                        </Box>\r\n                        <Grid\r\n                            container\r\n                            wrap='wrap'\r\n                            justify='space-between'\r\n                        >\r\n                            {tvShow.seasons && tvShow.seasons.map(season => (\r\n                                <Link style={cardLinkStyles} key={season.id} to={`/tv/${id}/season/${season.season_number}`}>\r\n                                    <Card className={classes.card}>\r\n                                        <Poster posterPath={season.poster_path} width={'100%'} height={180} />\r\n                                        {season.name}\r\n                                    </Card>\r\n                                </Link>\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { Box, Grid, Card } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Poster } from '../poster/poster'\r\n\r\nimport { TMD_Api } from '../../api'\r\n\r\nconst cardLinkStyles = {\r\n    display: 'flex',\r\n    boxSizing: 'border-box',\r\n    width: '140px',\r\n    textDecoration: 'none',\r\n    flexShrink: 0,\r\n    marginBottom: 24,\r\n}\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: '100%',\r\n        padding: 8,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    movieTextInfo: {\r\n        maxWidth: '900px', \r\n        marginLeft: '16px' \r\n    }\r\n});\r\nconst API = new TMD_Api()\r\nexport const TvSeason = () => {\r\n    let [tvSeason, setTvSeason] = useState({})\r\n    const { id, season_number } = useParams()\r\n\r\n    useEffect(() => {\r\n        API.fetchTvShowSeason(id, season_number)\r\n            .then(season => setTvSeason(season))\r\n    }, [id, season_number])\r\n\r\n    const classes = useStyles()\r\n    return (\r\n        <Box className=\"tv-season\">\r\n            {tvSeason &&\r\n                <>\r\n                    <Grid container >\r\n                        <Poster posterPath={tvSeason.poster_path} />\r\n                        <Box className={`movie-text-info ${classes.movieTextInfo}`} >\r\n                            <h3 className=\"tv-season-name\">\r\n                                {tvSeason.name}\r\n                            </h3>\r\n                            <div className=\"tv-season-discr\">\r\n                                <b>Discription:</b>\r\n                                <p>{tvSeason.overview ? tvSeason.overview : 'Not found'}</p>\r\n                            </div>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        wrap='wrap'\r\n                        justify='space-between'\r\n                    >\r\n                        {tvSeason.episodes && tvSeason.episodes.map(episode => (\r\n                            <Link\r\n                                style={cardLinkStyles}\r\n                                key={episode.id}\r\n                                to={`/tv/${id}/season/${season_number}/episode/${episode.episode_number}`}\r\n                            >\r\n                                <Card className={classes.card}>\r\n                                    <span className=\"episode-number\">Ep: {episode.episode_number}.</span>\r\n                                    <span className=\"episode-title\">{episode.name}</span>\r\n                                </Card>\r\n                            </Link>\r\n                        ))}\r\n                    </Grid>\r\n                </>\r\n            }\r\n        </Box>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Box, Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { TMD_Api } from '../../api'\r\n\r\nconst useStyles = makeStyles({\r\n    movieTextInfo: {\r\n        maxWidth: '900px',\r\n        marginLeft: '16px'\r\n    }\r\n})\r\nconst API = new TMD_Api()\r\nexport const TvEpisode = () => {\r\n    let [tvEpisode, setTvEpisode] = useState({})\r\n    const { id, season_number, episode_number } = useParams()\r\n    useEffect(() => {\r\n        API.fetchTvEpisode(id, season_number, episode_number)\r\n            .then(episode => setTvEpisode(episode))\r\n    }, [id, season_number, episode_number])\r\n    const classes = useStyles() \r\n    return (\r\n        <Box className=\"tv-season\">\r\n            {tvEpisode &&\r\n                <Grid container >\r\n                    <Box className={`movie-text-info ${classes.movieTextInfo}`}>\r\n                        <h3 className=\"tv-season-name\">\r\n                            Title: {tvEpisode.name}\r\n                        </h3>\r\n                        <div className=\"tv-season-discr\">\r\n                            <b>Discription:</b>\r\n                            <p>{tvEpisode.overview ? tvEpisode.overview : 'Not found'}</p>\r\n                        </div>\r\n                    </Box>\r\n                </Grid>\r\n            }\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport { Header } from '../components/header/header';\r\nimport { TvShowList } from '../components/tv-shows-list/tv-shows-list';\r\nimport { TvShow } from '../components/tv-show/tv-show';\r\nimport { TvSeason } from '../components/tv-season/tv-season';\r\nimport { TvEpisode } from '../components/tv-episode/tv-episode'\r\n\r\nexport const TvShows = () => {\r\n    return (\r\n        <Container component='div'>\r\n            <Header />\r\n            <Switch>\r\n                <Route exact path='/tv' >\r\n                    <TvShowList />\r\n                </Route>\r\n                <Route exact path='/tv/:id' >\r\n                    <TvShow />\r\n                </Route>\r\n                <Route exact path='/tv/:id/season/:season_number' >\r\n                    <TvSeason />\r\n                </Route>\r\n                <Route exact path='/tv/:id/season/:season_number/episode/:episode_number' >\r\n                    <TvEpisode />\r\n                </Route>\r\n            </Switch>\r\n        </Container>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Container,\r\n    TextField,\r\n    Box,\r\n    Button,\r\n    makeStyles,\r\n    MenuItem,\r\n    Grid,\r\n    Typography,\r\n} from '@material-ui/core';\r\n\r\nimport { Header } from '../components/header/header'\r\nimport { List } from '../components/list/list'\r\n\r\nimport { TMD_Api } from '../api'\r\nimport { MAX_PAGE, MIN_PAGE, OPTIONS } from '../constants'\r\n\r\nconst useStyles = makeStyles({\r\n    search: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        padding: '0 16px',\r\n    },\r\n    input: {\r\n        flexGrow: 1,\r\n        marginRight: 16,\r\n        marginTop: 16,\r\n    },\r\n    button: {\r\n        marginTop: 16,\r\n    },\r\n    select: {\r\n        width: 80,\r\n    },\r\n    currentPage: {\r\n        margin: '16px', \r\n        display: 'inline-block'\r\n    },\r\n    mr2: {\r\n        marginRight: '16px'\r\n    },\r\n    mr4: {\r\n        marginRight: '32px'\r\n    }\r\n})\r\nconst API = new TMD_Api()\r\nexport const Search = () => {\r\n    let [searchArea, setSearchArea] = useState('movie');\r\n    let [searchValue, setSearchValue] = useState('');\r\n    let [list, setList] = useState([]);\r\n    let [page, setPage] = useState(1);\r\n    const handleInputChange = e => setSearchValue(e.target.value);\r\n    const handleSelectChange = e => setSearchArea(e.target.value);\r\n    useEffect(() => {\r\n        if (searchValue) {\r\n            API.fetchWithSearch(searchArea, searchValue, page)\r\n                .then(result => setList(result.results))\r\n\r\n        }\r\n    }, [searchValue, page, searchArea])\r\n    const nextPage = () => {\r\n        if (page < MAX_PAGE) {\r\n            setPage(page + 1)\r\n        }\r\n    }\r\n    const backPage = () => {\r\n        if (page > MIN_PAGE) {\r\n            setPage(page - 1)\r\n        }\r\n    }\r\n    const classes = useStyles();\r\n    const isEmpty = list.length === 0;\r\n    return (\r\n        <Container component='div'>\r\n            <Header />\r\n            <Box component='div' className={classes.search}>\r\n                <TextField\r\n                    select\r\n                    label='area'\r\n                    className={classes.select}\r\n                    onChange={handleSelectChange}\r\n                    value={searchArea}\r\n                >\r\n                    {OPTIONS.map(option => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                            {option.value}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n                <TextField\r\n                    className={classes.input}\r\n                    onChange={handleInputChange}\r\n                    value={searchValue}\r\n                />\r\n                <Button\r\n                    variant='contained'\r\n                    color='primary'\r\n                    className={classes.button}\r\n                >\r\n                    Search\r\n                </Button>\r\n            </Box>\r\n            <Typography\r\n                variant='subtitle2'\r\n                component='span'\r\n                className={classes.currentPage}\r\n            >\r\n                Current page: {page}\r\n            </Typography>\r\n            <Button\r\n                onClick={backPage}\r\n                variant='contained'\r\n                color='primary'\r\n                className={classes.mr2}\r\n            >\r\n                back\r\n            </Button>\r\n            <Button\r\n                onClick={nextPage}\r\n                variant='contained'\r\n                color='primary'\r\n            >\r\n                next\r\n            </Button>\r\n            <Grid>\r\n                <List type={searchArea} list={list} />\r\n            </Grid>\r\n            {!isEmpty &&\r\n                <Box className={classes.buttonBox}>\r\n                    <Button\r\n                        onClick={backPage}\r\n                        variant='contained'\r\n                        color='primary'\r\n                        className={classes.mr4}\r\n                    >\r\n                        back\r\n                    </Button>\r\n                    <Button\r\n                        onClick={nextPage}\r\n                        variant='contained'\r\n                        color='primary'\r\n                    >\r\n                        next\r\n                    </Button>\r\n                </Box>\r\n            }\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport { Home } from './views/home.jsx';\r\nimport { Movies } from './views/movies.jsx';\r\nimport { TvShows } from './views/tv.jsx';\r\nimport { Search } from './views/search.jsx';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route path='/movies' component={Movies} />\r\n          <Route path='/tv' component={TvShows} />\r\n          <Route path='/search' component={Search} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}