{"version":3,"sources":["components/header/header.jsx","views/home.jsx","components/pagination-buttons/pagination-buttons.jsx","constants.js","components/poster/poster.jsx","components/list/list.jsx","api.js","components/movies-list/movies-list.jsx","components/movie/movie.jsx","views/movies.jsx","components/tv-shows-list/tv-shows-list.jsx","components/tv-show/tv-show.jsx","components/tv-season/tv-season.jsx","components/tv-episode/tv-episode.jsx","views/tv.jsx","views/search.jsx","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","header","marginBottom","position","ml2","marginLeft","mt2","marginTop","select","width","button","Header","classes","Box","component","className","m","exact","to","home","display","fontSize","maxWidth","color","Home","Container","Typography","buttonBox","justifyContent","alignItems","mx4","margin","PaginationButtons","backPage","nextPage","currentPage","maxPage","Button","onClick","variant","TMD_URL","TMD_IMG_URL","TMD_API_KEY","OPTIONS","value","Poster","posterPath","height","media","CardMedia","src","onError","e","target","title","card","boxSizing","padding","flexGrow","flexShrink","inlineSubtitle","marginRight","cardLinkStyles","textDecoration","List","list","type","Grid","container","wrap","justify","map","item","style","key","id","String","Date","now","Card","poster_path","vote_average","overview","TMD_Api","MOVIE_URL","fetch","data","json","page","MOVIES_URL","TV_SHOW_URL","TV_SHOWS_URL","searchArea","searchValue","SEARCH_URL","season_number","TV_SHOW_SEASON_URL","tvShowId","episode_number","TV_SHOW_EPISODE_URL","API","MoviesList","useState","setList","setPage","setMaxPage","useEffect","fetchMovies","then","res","results","total_pages","scrollToTop","document","body","scrollTop","documentElement","isEmpty","length","CircularProgress","movieTextInfo","Movie","movie","setMovie","useParams","fetchMovie","alt","release_date","runtime","status","vote_count","tagline","revenue","Movies","path","TvShowList","fetchTvShows","tvShowInfo","TvShow","tvShow","setTvShow","fetchTvShow","tv","first_air_date","episode_run_time","number_of_seasons","number_of_episodes","seasons","season","name","flexDirection","TvSeason","tvSeason","setTvSeason","fetchTvShowSeason","episodes","episode","TvEpisode","tvEpisode","setTvEpisode","fetchTvShowEpisode","TvShows","search","input","Search","setSearchArea","setSearchValue","fetchWithSearch","TextField","label","onChange","option","MenuItem","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.07d7bf75.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Box } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    header: {\r\n        marginBottom: 24,\r\n        position: 'relative'\r\n    },\r\n    ml2: {\r\n        marginLeft: 16,\r\n    },\r\n    mt2: {\r\n        marginTop: 16,\r\n    },\r\n    select: {\r\n        width: 100,\r\n    },\r\n    button: {\r\n        marginTop: 16,\r\n        marginLeft: 16,\r\n    }\r\n})\r\n\r\nexport const Header = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box component='header' className={`header ${classes.header}`}>\r\n            <Box component='nav' m={2}>\r\n                <ul className=\"main-nav\">\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' exact to='/'>Home</NavLink>\r\n                    </li>\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' to='/movies'>Movies</NavLink>\r\n                    </li>\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' to='/tv'>TV-Show</NavLink>\r\n                    </li>\r\n                    <li className=\"main-nav__item\">\r\n                        <NavLink className='main-nav__link' to='/search'>Search</NavLink>\r\n                    </li>\r\n                </ul>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { Container, Box, Typography } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { Header } from '../components/header/header'\r\n\r\nconst useStyles = makeStyles({\r\n    home: {\r\n        display: 'inline-block',\r\n        marginBottom: '32px',\r\n        fontSize: '32px',\r\n        maxWidth: '720px',\r\n        color: '#444444',\r\n    },\r\n})\r\nexport const Home = () => {\r\n    const classes = useStyles();\r\n    return (\r\n        <Container component='div'>\r\n            <Header />\r\n            <Box component='main' m={2}>\r\n                <Typography component='p' className={ classes.home } >\r\n                    Hello, it's app for search info about movies or tv shows. You need to choose search area. <br/>\r\n                    Get started:\r\n                </Typography>\r\n                <Box component='div' >\r\n                    <Link to='/movies' className='button main-page-button'>Movies</Link>\r\n                    <Link to='/tv' className='button main-page-button'>TV-Shows</Link>\r\n                </Box>\r\n            </Box>\r\n        </Container>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { Button, Box } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n    buttonBox: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginBottom: 32,\r\n    },\r\n    mx4: {\r\n        margin: '0 32px',\r\n    }\r\n});\r\n\r\nexport const PaginationButtons = ({ backPage, nextPage, currentPage, maxPage }) => {\r\n    const classes = useStyles()\r\n    return (\r\n        <>\r\n            <Box className={classes.buttonBox}>\r\n                <Button onClick={backPage} variant='contained' color='primary' >\r\n                    back\r\n    </Button>\r\n                <span className={classes.mx4}>\r\n                    {currentPage}/{maxPage}\r\n                </span>\r\n                <Button onClick={nextPage} variant='contained' color='primary'>\r\n                    next\r\n    </Button>\r\n            </Box>\r\n        </>\r\n    )\r\n}","export const TMD_URL = 'https://api.themoviedb.org/3/';\r\nexport const TMD_IMG_URL = 'https://image.tmdb.org/t/p/'\r\nexport const MOVIE_PATH = 'movie/';\r\nexport const TV_SHOW_PATH = 'tv/';\r\nexport const DISCOVER_PATH = 'discover/';\r\n// I know, it's shouldn't be here. It should be in env variables ;)\r\nexport const TMD_API_KEY = 'api_key=5dea54ae7c9d9964e72e2ee872e49402';\r\n// export const MAX_PAGE = 100;\r\nexport const MIN_PAGE = 1;\r\nexport const OPTIONS = [\r\n    { value: 'movie' },\r\n    { value: 'tv' }\r\n]\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { CardMedia } from '@material-ui/core';\r\n\r\nimport { TMD_IMG_URL } from '../../constants'\r\n\r\n\r\n\r\nexport const Poster = ({ posterPath, width, height }) => {\r\n    const useStyles = makeStyles({\r\n        media: {\r\n            width: width ? width : 200,\r\n            height: height ? height : 300,\r\n            margin: '0, auto',\r\n            marginBottom: 8,\r\n        }\r\n    })\r\n    const classes = useStyles();\r\n    return (\r\n        <CardMedia\r\n            src={`${TMD_IMG_URL}w300${posterPath}`}\r\n            onError={(e) => e.target.src = 'https://imgur.com/Ax000FS.png'}\r\n            title=\"poster\"\r\n            className={classes.media}\r\n            component='img'\r\n        />\r\n    )\r\n}","import React from 'react';\r\nimport { Card, Typography, Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { Poster } from '../poster/poster';\r\n\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: 280,\r\n        padding: 24,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n    },\r\n    title: {\r\n        marginBottom: 16,\r\n    },\r\n    inlineSubtitle: {\r\n        marginRight: 8,\r\n    }\r\n});\r\nconst cardLinkStyles = {\r\n    display: 'flex',\r\n    boxSizing: 'border-box',\r\n    width: '280px',\r\n    textDecoration: 'none',\r\n    flexShrink: 0,\r\n    marginBottom: 24,\r\n}\r\nexport const List = ({ list, type }) => {\r\n    const classes = useStyles();\r\n    switch (type) {\r\n        case 'movie':\r\n            return (\r\n                <Grid\r\n                    container\r\n                    className={classes.media}\r\n                    wrap='wrap'\r\n                    justify='space-between'\r\n                >\r\n                    {list && list.map(item => (\r\n                        <Link style={cardLinkStyles} key={item.id + String(Date.now())} to={`/movies/${item.id}`}>\r\n                            <Card className={classes.card}>\r\n                                <Poster posterPath={item.poster_path} />\r\n                                <Typography variant='h5' component='h3' className={classes.title}>\r\n                                    {item.title}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='span' className={classes.inlineSubtitle}>\r\n                                    Rating:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='span'>\r\n                                    {item.vote_average}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='p'>\r\n                                    Discription:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='p'>\r\n                                    {item.overview}\r\n                                </Typography>\r\n                            </Card>\r\n                        </Link>\r\n                    ))}\r\n                </Grid>\r\n            )\r\n        case 'tv':\r\n            return (\r\n                <Grid\r\n                    container\r\n                    wrap='wrap'\r\n                    justify='space-between'\r\n                >\r\n                    {list && list.map(item => (\r\n                        <Link style={cardLinkStyles} key={item.id} to={`/tv/${item.id}`}>\r\n                            <Card className={classes.card}>\r\n                                <Poster posterPath={item.poster_path} />\r\n                                <Typography variant='h5' component='h3' className={classes.title}>\r\n                                    {item.title}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='span' className={classes.inlineSubtitle}>\r\n                                    Votes:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='span'>\r\n                                    {item.vote_average}\r\n                                </Typography>\r\n                                <Typography variant='subtitle2' component='p'>\r\n                                    Discription:\r\n                                </Typography>\r\n                                <Typography variant='body2' component='p'>\r\n                                    {item.overview}\r\n                                </Typography>\r\n                            </Card>\r\n                        </Link>\r\n                    ))}\r\n                </Grid>\r\n            )\r\n        default:\r\n            return null;\r\n    }\r\n}","import { TMD_URL, TMD_API_KEY, DISCOVER_PATH } from './constants'\r\n\r\nexport class TMD_Api {\r\n    async fetchMovie(id) {\r\n        const MOVIE_URL = `${TMD_URL}movie/${id}?${TMD_API_KEY}`\r\n        const data = await fetch(MOVIE_URL)\r\n        return data.json()\r\n    }\r\n    async fetchMovies(page) {\r\n        const MOVIES_URL = `${TMD_URL}${DISCOVER_PATH}movie?${TMD_API_KEY}&page=${page}`\r\n        const data = await fetch(MOVIES_URL)\r\n        return data.json()\r\n    }\r\n    async fetchTvShow(id) {\r\n        const TV_SHOW_URL = `${TMD_URL}tv/${id}?${TMD_API_KEY}`\r\n        const data = await fetch(TV_SHOW_URL)\r\n        return data.json()\r\n    }\r\n    async fetchTvShows(page) {\r\n        const TV_SHOWS_URL = `${TMD_URL}${DISCOVER_PATH}tv?${TMD_API_KEY}&page=${page}`\r\n        const data = await fetch(TV_SHOWS_URL)\r\n        return data.json()\r\n    }\r\n    async fetchWithSearch(searchArea, searchValue, page) {\r\n        const SEARCH_URL = `${TMD_URL}search/${searchArea}?${TMD_API_KEY}&page=${page}&query=${searchValue}`\r\n        const data = await fetch(SEARCH_URL)\r\n        return data.json()\r\n    }\r\n    async fetchTvShowSeason(id, season_number) {\r\n        const TV_SHOW_SEASON_URL = `${TMD_URL}tv/${id}/season/${season_number}?${TMD_API_KEY}`\r\n        const data = await fetch(TV_SHOW_SEASON_URL)\r\n        return data.json()\r\n    }\r\n    async fetchTvShowEpisode(tvShowId, season_number, episode_number) {\r\n        const TV_SHOW_EPISODE_URL = `${TMD_URL}tv/${tvShowId}/season/${season_number}/episode/${episode_number}?${TMD_API_KEY}`\r\n        const data = await fetch(TV_SHOW_EPISODE_URL)\r\n        return data.json()\r\n    }\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport { PaginationButtons } from '../pagination-buttons/pagination-buttons';\r\n\r\nimport { List } from '../list/list'\r\nimport { TMD_Api } from '../../api'\r\nimport { MIN_PAGE } from '../../constants'\r\n\r\nconst API = new TMD_Api()\r\nexport const MoviesList = () => {\r\n    const [list, setList] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [maxPage, setMaxPage] = useState([1]);\r\n    useEffect(() => {\r\n        API.fetchMovies(page)\r\n            .then(res => {\r\n                setList(res.results);\r\n                setMaxPage(res.total_pages);\r\n            })\r\n        scrollToTop()\r\n    }, [page])\r\n    const nextPage = () => {\r\n        if (page < maxPage) {\r\n            setPage(page + 1)\r\n        }\r\n    }\r\n    const backPage = () => {\r\n        if (page > MIN_PAGE) {\r\n            setPage(page - 1)\r\n        }\r\n    }\r\n    const scrollToTop = () => {\r\n        document.body.scrollTop = 0; // For Safari\r\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\r\n    }\r\n    let isEmpty = list.length === 0;\r\n    return (\r\n        <>\r\n            {isEmpty &&\r\n                <CircularProgress style={{ display: 'block', margin: '0 auto' }} />\r\n            }\r\n            {!isEmpty &&\r\n                <>\r\n                    <PaginationButtons\r\n                        currentPage={page}\r\n                        maxPage={maxPage}\r\n                        nextPage={nextPage}\r\n                        backPage={backPage}\r\n                    />\r\n                    <List type='movie' list={list} />\r\n                    <PaginationButtons\r\n                        currentPage={page}\r\n                        maxPage={maxPage}\r\n                        nextPage={nextPage}\r\n                        backPage={backPage}\r\n                    />\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { Box, Grid } from '@material-ui/core';\r\n\r\nimport { TMD_Api } from '../../api'\r\n\r\nimport { TMD_IMG_URL } from '../../constants'\r\n\r\nconst useStyles = makeStyles({\r\n    movieTextInfo: { \r\n        maxWidth: 900, \r\n        marginLeft: 16\r\n    }\r\n})\r\nconst API = new TMD_Api()\r\nexport const Movie = () => {\r\n    const [movie, setMovie] = useState({})\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        API.fetchMovie(id)\r\n            .then(movie => setMovie(movie))\r\n    }, [id])\r\n    const classes = useStyles()\r\n    return (\r\n        <Box >\r\n            {movie &&\r\n                <Grid container >\r\n                    <div className=\"img-wrapper\">\r\n                        <img\r\n                            alt={`${movie.title} poster`}\r\n                            src={`${TMD_IMG_URL}w300${movie.poster_path}`}\r\n                        />\r\n                    </div>\r\n                    <Box className={`movie-text-info ${classes.movieTextInfo}`}>\r\n                        <h3 className=\"title\">\r\n                            {movie.title}\r\n                        </h3>\r\n                        <span className=\"movie-release-date\">\r\n                            Release date: {movie.release_date}\r\n                        </span>\r\n                        <p className=\"movie-runtime\">\r\n                            Time(minutes): {movie.runtime}\r\n                        </p>\r\n                        <p className=\"movie-status\">\r\n                            Status: {movie.status}\r\n                        </p>\r\n                        <p className=\"movie-vote-average\">\r\n                            Rating: {movie.vote_average}({movie.vote_count})\r\n                        </p>\r\n                        <p className=\"movie-tagline\">\r\n                            Tagline: {movie.tagline}\r\n                        </p>\r\n                        <p className=\"movie-revenue\">\r\n                            Revenue: ${movie.revenue}\r\n                        </p>\r\n                        <p className=\"movie-disc\">\r\n                            Discription: <br />{movie.overview}\r\n                        </p>\r\n                    </Box>\r\n                </Grid>\r\n            }\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport { Header } from '../components/header/header';\r\nimport { MoviesList } from '../components/movies-list/movies-list';\r\nimport { Movie } from '../components/movie/movie'\r\n\r\nexport const Movies = ({ classes }) => {\r\n\r\n    return (\r\n        <Container component='div'>\r\n            <Header classes={classes} />\r\n            <Switch>\r\n                <Route exact path='/movies' >\r\n                    <MoviesList />\r\n                </Route>\r\n                <Route path='/movies/:id' >\r\n                    <Movie />\r\n                </Route>\r\n            </Switch>\r\n        </Container>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport { PaginationButtons } from '../pagination-buttons/pagination-buttons'\r\n\r\nimport { TMD_Api } from '../../api'\r\nimport { List } from '../list/list'\r\nimport { MIN_PAGE } from '../../constants'\r\n\r\nconst API = new TMD_Api()\r\nexport const TvShowList = () => {\r\n    const [list, setList] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [maxPage, setMaxPage] = useState([1]);\r\n    useEffect(() => {\r\n        API.fetchTvShows(page)\r\n            .then(res => {\r\n                setList(res.results);\r\n                setMaxPage(res.total_pages);\r\n            })\r\n        scrollToTop()\r\n    }, [page])\r\n    const nextPage = () => {\r\n        if (page < maxPage) {\r\n            setPage(page + 1)\r\n        }\r\n    }\r\n    const backPage = () => {\r\n        if (page > MIN_PAGE) {\r\n            setPage(page - 1)\r\n        }\r\n    }\r\n    const scrollToTop = () => {\r\n        document.body.scrollTop = 0; // For Safari\r\n        document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera\r\n    }\r\n    const isEmpty = list.length === 0;\r\n    return (\r\n        <div className=\"tv-shows\">\r\n            {isEmpty &&\r\n                <CircularProgress style={{ display: 'block', margin: '0 auto' }} />\r\n            }\r\n            {!isEmpty &&\r\n                <>\r\n                    <PaginationButtons\r\n                        currentPage={page}\r\n                        maxPage={maxPage}\r\n                        nextPage={nextPage}\r\n                        backPage={backPage}\r\n                    />\r\n                    <List type='tv' list={list} />\r\n                    <PaginationButtons\r\n                        currentPage={page}\r\n                        maxPage={maxPage}\r\n                        nextPage={nextPage}\r\n                        backPage={backPage}\r\n                    />\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { Box, Grid, Card } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Poster } from '../poster/poster';\r\n\r\nimport { TMD_Api } from '../../api';\r\nimport { TMD_IMG_URL } from '../../constants';\r\n\r\nconst cardLinkStyles = {\r\n    display: 'flex',\r\n    boxSizing: 'border-box',\r\n    width: '140px',\r\n    textDecoration: 'none',\r\n    flexShrink: 0,\r\n    marginBottom: 24,\r\n}\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: '100%',\r\n        padding: 8,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n    }, \r\n    tvShowInfo: {\r\n        maxWidth: '900px', \r\n        marginLeft: '16px' \r\n    }\r\n});\r\nconst API = new TMD_Api()\r\nexport const TvShow = () => {\r\n    const [tvShow, setTvShow] = useState({});\r\n    const { id } = useParams();\r\n    useEffect(() => {\r\n        API.fetchTvShow(id)\r\n            .then(tv => setTvShow(tv))\r\n    }, [id])\r\n    const classes = useStyles();\r\n    return (\r\n        <Box>\r\n            <Box >\r\n                {tvShow &&\r\n                    <Grid container >\r\n                        <div >\r\n                            <img\r\n                                alt={`${tvShow.title} poster`}\r\n                                src={`${TMD_IMG_URL}w300${tvShow.poster_path}`}\r\n                            />\r\n                        </div>\r\n                        <Box className={classes.tvShowInfo}>\r\n                            <h3 className=\"title\">\r\n                                {tvShow.title}\r\n                            </h3>\r\n                            <span className=\"tvShow-release-date\">\r\n                                First episode: {tvShow.first_air_date}\r\n                            </span>\r\n                            <p className=\"tvShow-runtime\">\r\n                                Episode runtime(minutes): {tvShow.episode_run_time}\r\n                            </p>\r\n                            <p className=\"tvShow-status\">\r\n                                Seasons: {tvShow.number_of_seasons}\r\n                            </p>\r\n                            <p className=\"tvShow-status\">\r\n                                Episodes: {tvShow.number_of_episodes}\r\n                            </p>\r\n                            <p className=\"tvShow-vote-average\">\r\n                                Rating: {tvShow.vote_average}({tvShow.vote_count})\r\n                        </p>\r\n                            <p className=\"tvShow-disc\">\r\n                                Discription: <br />{tvShow.overview}\r\n                            </p>\r\n                        </Box>\r\n                        <Grid\r\n                            container\r\n                            wrap='wrap'\r\n                            justify='space-between'\r\n                        >\r\n                            {tvShow.seasons && tvShow.seasons.map(season => (\r\n                                <Link style={cardLinkStyles} key={season.id} to={`/tv/${id}/season/${season.season_number}`}>\r\n                                    <Card className={classes.card}>\r\n                                        <Poster posterPath={season.poster_path} width={'100%'} height={180} />\r\n                                        {season.name}\r\n                                    </Card>\r\n                                </Link>\r\n                            ))}\r\n                        </Grid>\r\n                    </Grid>\r\n                }\r\n            </Box>\r\n        </Box>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport { Box, Grid, Card } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Poster } from '../poster/poster'\r\n\r\nimport { TMD_Api } from '../../api'\r\n\r\nconst cardLinkStyles = {\r\n    display: 'flex',\r\n    boxSizing: 'border-box',\r\n    width: '140px',\r\n    textDecoration: 'none',\r\n    flexShrink: 0,\r\n    marginBottom: 24,\r\n}\r\nconst useStyles = makeStyles({\r\n    card: {\r\n        boxSizing: 'border-box',\r\n        width: '100%',\r\n        padding: 8,\r\n        flexGrow: 0,\r\n        flexShrink: 0,\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n    },\r\n    movieTextInfo: {\r\n        maxWidth: '900px', \r\n        marginLeft: '16px' \r\n    }\r\n});\r\nconst API = new TMD_Api()\r\nexport const TvSeason = () => {\r\n    let [tvSeason, setTvSeason] = useState({})\r\n    const { id, season_number } = useParams()\r\n\r\n    useEffect(() => {\r\n        API.fetchTvShowSeason(id, season_number)\r\n            .then(season => setTvSeason(season))\r\n    }, [id, season_number])\r\n\r\n    const classes = useStyles()\r\n    return (\r\n        <Box className=\"tv-season\">\r\n            {tvSeason &&\r\n                <>\r\n                    <Grid container >\r\n                        <Poster posterPath={tvSeason.poster_path} />\r\n                        <Box className={`movie-text-info ${classes.movieTextInfo}`} >\r\n                            <h3 className=\"tv-season-name\">\r\n                                {tvSeason.name}\r\n                            </h3>\r\n                            <div className=\"tv-season-discr\">\r\n                                <b>Discription:</b>\r\n                                <p>{tvSeason.overview ? tvSeason.overview : 'Not found'}</p>\r\n                            </div>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid\r\n                        container\r\n                        wrap='wrap'\r\n                        justify='space-between'\r\n                    >\r\n                        {tvSeason.episodes && tvSeason.episodes.map(episode => (\r\n                            <Link\r\n                                style={cardLinkStyles}\r\n                                key={episode.id}\r\n                                to={`/tv/${id}/season/${season_number}/episode/${episode.episode_number}`}\r\n                            >\r\n                                <Card className={classes.card}>\r\n                                    <span className=\"episode-number\">Ep: {episode.episode_number}.</span>\r\n                                    <span className=\"episode-title\">{episode.name}</span>\r\n                                </Card>\r\n                            </Link>\r\n                        ))}\r\n                    </Grid>\r\n                </>\r\n            }\r\n        </Box>\r\n    )\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { Box, Grid } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport { TMD_Api } from '../../api'\r\n\r\nconst useStyles = makeStyles({\r\n    movieTextInfo: {\r\n        maxWidth: '900px',\r\n        marginLeft: '16px'\r\n    }\r\n})\r\nconst API = new TMD_Api()\r\nexport const TvEpisode = () => {\r\n    let [tvEpisode, setTvEpisode] = useState({})\r\n    const { id, season_number, episode_number } = useParams()\r\n    useEffect(() => {\r\n        API.fetchTvShowEpisode(id, season_number, episode_number)\r\n            .then(episode => setTvEpisode(episode))\r\n    }, [id, season_number, episode_number])\r\n    const classes = useStyles() \r\n    return (\r\n        <Box className=\"tv-season\">\r\n            {tvEpisode &&\r\n                <Grid container >\r\n                    <Box className={`movie-text-info ${classes.movieTextInfo}`}>\r\n                        <h3 className=\"tv-season-name\">\r\n                            Title: {tvEpisode.name}\r\n                        </h3>\r\n                        <div className=\"tv-season-discr\">\r\n                            <b>Discription:</b>\r\n                            <p>{tvEpisode.overview ? tvEpisode.overview : 'Not found'}</p>\r\n                        </div>\r\n                    </Box>\r\n                </Grid>\r\n            }\r\n        </Box>\r\n    )\r\n}","import React from 'react';\r\nimport { Container } from '@material-ui/core';\r\nimport { Switch, Route } from 'react-router-dom';\r\n\r\nimport { Header } from '../components/header/header';\r\nimport { TvShowList } from '../components/tv-shows-list/tv-shows-list';\r\nimport { TvShow } from '../components/tv-show/tv-show';\r\nimport { TvSeason } from '../components/tv-season/tv-season';\r\nimport { TvEpisode } from '../components/tv-episode/tv-episode'\r\n\r\nexport const TvShows = () => {\r\n    return (\r\n        <Container component='div'>\r\n            <Header />\r\n            <Switch>\r\n                <Route exact path='/tv' >\r\n                    <TvShowList />\r\n                </Route>\r\n                <Route exact path='/tv/:id' >\r\n                    <TvShow />\r\n                </Route>\r\n                <Route exact path='/tv/:id/season/:season_number' >\r\n                    <TvSeason />\r\n                </Route>\r\n                <Route exact path='/tv/:id/season/:season_number/episode/:episode_number' >\r\n                    <TvEpisode />\r\n                </Route>\r\n            </Switch>\r\n        </Container>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Container,\r\n    TextField,\r\n    Box,\r\n    Button,\r\n    makeStyles,\r\n    MenuItem,\r\n    Grid,\r\n} from '@material-ui/core';\r\n\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nimport { Header } from '../components/header/header'\r\nimport { List } from '../components/list/list'\r\nimport { PaginationButtons } from '../components/pagination-buttons/pagination-buttons';\r\n\r\nimport { TMD_Api } from '../api'\r\nimport { MIN_PAGE, OPTIONS } from '../constants'\r\n\r\nconst useStyles = makeStyles({\r\n    search: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        padding: '0 16px',\r\n    },\r\n    input: {\r\n        flexGrow: 1,\r\n        marginRight: 16,\r\n        marginTop: 16,\r\n    },\r\n    button: {\r\n        marginTop: 16,\r\n    },\r\n    select: {\r\n        width: 80,\r\n    },\r\n})\r\nconst API = new TMD_Api()\r\nexport const Search = () => {\r\n    const [searchArea, setSearchArea] = useState('movie');\r\n    const [searchValue, setSearchValue] = useState('');\r\n    const [list, setList] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [maxPage, setMaxPage] = useState([1]);\r\n    const handleInputChange = e => setSearchValue(e.target.value);\r\n    const handleSelectChange = e => setSearchArea(e.target.value);\r\n    useEffect(() => {\r\n        if (searchValue) {\r\n            API.fetchWithSearch(searchArea, searchValue, page)\r\n                .then(res => {\r\n                    setList(res.results)\r\n                    setMaxPage(res.total_pages);\r\n                })\r\n        }\r\n    }, [searchValue, page, searchArea])\r\n    const nextPage = () => {\r\n        if (page < maxPage) {\r\n            setPage(page + 1)\r\n        }\r\n    }\r\n    const backPage = () => {\r\n        if (page > MIN_PAGE) {\r\n            setPage(page - 1)\r\n        }\r\n    }\r\n    const classes = useStyles();\r\n    const isEmpty = list.length === 0;\r\n    return (\r\n        <Container component='div'>\r\n            <Header />\r\n            <Box component='div' className={classes.search}>\r\n                <TextField\r\n                    select\r\n                    label='area'\r\n                    className={classes.select}\r\n                    onChange={handleSelectChange}\r\n                    value={searchArea}\r\n                >\r\n                    {OPTIONS.map(option => (\r\n                        <MenuItem key={option.value} value={option.value}>\r\n                            {option.value}\r\n                        </MenuItem>\r\n                    ))}\r\n                </TextField>\r\n                <TextField\r\n                    className={classes.input}\r\n                    onChange={handleInputChange}\r\n                    value={searchValue}\r\n                />\r\n                <Button\r\n                    variant='contained'\r\n                    color='primary'\r\n                    className={classes.button}\r\n                >\r\n                    Search\r\n                </Button>\r\n            </Box>\r\n            {(isEmpty && searchValue) &&\r\n                <CircularProgress style={{ display: 'block', margin: '0 auto' }} />\r\n            }\r\n            {(!isEmpty && searchValue) &&\r\n                <>\r\n                    <PaginationButtons\r\n                        currentPage={page}\r\n                        maxPage={maxPage}\r\n                        nextPage={nextPage}\r\n                        backPage={backPage}\r\n                    />\r\n                    <Grid>\r\n                        <List type={searchArea} list={list} />\r\n                    </Grid>\r\n                    <PaginationButtons\r\n                        currentPage={page}\r\n                        maxPage={maxPage}\r\n                        nextPage={nextPage}\r\n                        backPage={backPage}\r\n                    />\r\n                </>\r\n            }\r\n        </Container>\r\n    )\r\n}","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\n\r\nimport { Home } from './views/home.jsx';\r\nimport { Movies } from './views/movies.jsx';\r\nimport { TvShows } from './views/tv.jsx';\r\nimport { Search } from './views/search.jsx';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route exact path='/' component={Home} />\r\n          <Route path='/movies' component={Movies} />\r\n          <Route path='/tv' component={TvShows} />\r\n          <Route path='/search' component={Search} />\r\n        </Switch>\r\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}